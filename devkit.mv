<MvFUNCTION NAME = "Module_Description" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvASSIGN NAME = "l.module:code"		VALUE = "devkit">
	<MvASSIGN NAME = "l.module:name"		VALUE = "Devkit">
	<MvASSIGN NAME = "l.module:provider"	VALUE = "Steven Soule and Tess Guefen">
	<MvASSIGN NAME = "l.module:version"		VALUE = "1.000">
	<MvASSIGN NAME = "l.module:api_ver"		VALUE = "9.00">
	<MvASSIGN NAME = "l.module:description"	VALUE = "Super Fantastic Awesome Magic Fireworks developer toolkit.">
	<MvASSIGN NAME = "l.module:features"	VALUE = "util, vis_util, component, system">
</MvFUNCTION>

<MvCOMMENT>
| ========================================================================================================================
|	SYSTEM 
| ========================================================================================================================
</MvCOMMENT>

<MvFUNCTION NAME = "SystemModule_Action" PARAMETERS = "module var, action" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Check for `g.DKIG_Code` & `g.DKIG_Value`
	|		Check for `ADPR` & `ADPM`
	|
	</MvCOMMENT>
	<MvIF EXPR = "{ ( NOT ISNULL g.DKIG_Code ) AND ( NOT ISNULL g.DKIG_Value ) }">	
		<MvASSIGN NAME = "g.DKIG" VALUE = "">

		<MvIF EXPR = "{ 'ADPR' CIN l.action }">
			<MvASSIGN NAME = "l.success" VALUE = "{ ItemGroup_Determine_Same( g.Product_Code, g.Quantity, g.Attributes, g.Product_Attributes, g.DKIG_Code, g.DKIG_Value, g.DKIG:Updates, g.DKIG:New ) }">
		</MvIF>

		<MvIF EXPR = "{ ( 'ADPM' CIN l.action ) AND g.Products }">
			<MvASSIGN NAME = "l.success" VALUE = "{ miva_array_collapse( g.Products ) }">
			<MvFOREACH ITERATOR = "l.product" ARRAY = "g.Products">
				<MvASSIGN NAME = "l.success" VALUE = "{ ItemGroup_Determine_Same( l.product:code, l.product:quantity, g.Attributes, l.product:attributes, g.DKIG_Code, g.DKIG_Value, g.DKIG:Updates, g.DKIG:New ) }">
			</MvFOREACH>
		</MvIF>
	</MvIF>
	<MvCOMMENT>
	|
	| Check for `g.DKIG_Update`
	|	Check for `QTYG` & `RGRP`
	|
	</MvCOMMENT>
	<MvIF EXPR = "{ ( NOT ISNULL g.DKIG_Update ) }">
		<MvIF EXPR = "{ 'QTYG' CIN l.action }">
			<MvASSIGN NAME = "l.success" VALUE = "{ ItemGroup_Find_Update_Grouped_Items( g.Basket_Group, g.DKIG_Update, g.DKIG:Quantity_Updates ) }">
		</MvIF>
		<MvIF EXPR = "{ 'RGRP' CIN l.action }">
			<MvASSIGN NAME = "l.success" VALUE = "{ ItemGroup_Find_Update_Grouped_Items( g.Basket_Group, g.DKIG_Update, g.DKIG:Remove_Updates ) }">
		</MvIF>
	</MvIF>
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>


<MvFUNCTION NAME = "SystemModule_Screen" PARAMETERS = "module var, screen" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Assign g.Module_Devkit, for use with mvt:dos.
	|
	</MvCOMMENT>
	<MvASSIGN NAME = "g.Module_Devkit" VALUE = "{ g.Module_Root $ 'util/devkit.mvc' }">

	<MvIF EXPR = "{ g.DKIG:Updates }">
		<MvASSIGN NAME = "l.success" VALUE = "{ ItemGroup_Seperate_Products_Out( g.DKIG:Updates, g.DKIG_Code, g.DKIG_Value ) }">
	</MvIF>

	<MvIF EXPR = "{ g.DKIG:New }">
		<MvASSIGN NAME = "l.success" VALUE = "{ ItemGroup_Update_New_Products( g.DKIG:New ) }">
	</MvIF>

	<MvIF EXPR = "{ g.DKIG:Updates OR g.DKIG:New }">
		<MvASSIGN NAME = "l.success" VALUE = "{ [ g.Module_Feature_PGR_RT ].Runtime_Discount_Basket( g.Basket ) }">
	</MvIF>

	<MvIF EXPR = "{ g.DKIG:Quantity_Updates }">
		<MvASSIGN NAME = "l.success" VALUE = "{ ItemGroup_Update_Grouped_Items( g.DKIG:Quantity_Updates, g.Quantity ) }">
	</MvIF>

	<MvIF EXPR = "{ g.DKIG:Remove_Updates }">
		<MvASSIGN NAME = "l.success" VALUE = "{ ItemGroup_Remove_Grouped_Items( g.DKIG:Remove_Updates ) }">
	</MvIF>

	<MvCOMMENT>
		Uncomment when complete. This is for debugging.
		<MvASSIGN NAME = "g.DKIG" VALUE = "">
	</MvCOMMENT>
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>


<MvFUNCTION NAME = "SystemModule_UIException" PARAMETERS = "module var, exception" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>


<MvCOMMENT>
| ========================================================================================================================
|	VIS_UTIL
| ========================================================================================================================
</MvCOMMENT>

<MvFUNCTION NAME = "StoreUtilityModule_Action" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvFUNCTION NAME = "StoreUtilityModule_LeftNavigation" PARAMETERS = "module var, ident" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvFUNCTION NAME = "StoreUtilityModule_Screen" PARAMETERS = "module_var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvFUNCTION NAME = "StoreUtilityModule_Validate" PARAMETERS = "module_var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>


<MvCOMMENT>
| ========================================================================================================================
|	VIS_UTIL
| ========================================================================================================================
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Utility_Content" PARAMETERS = "module var, tab, load_fields" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.tab EQ 'DEVKIT' }">
		<h1>List of Functions</h1>
		<h3>This should be made pretty later.</h3>
		<hr />
		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Format_Currency', 'price, formatted_price var') }">
			</div>
			<div class="devkit-information">
				This is more info on the function...blahblahblah. Style and fill this out later with examples.
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Upcharge', 'charge_name, charge_type, amount, tax_exempt') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Variant_Array', 'product_id, variants var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Date', 'format, timestamp, return var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Load_Product', 'options var, product var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Product_Load_Imagetype', 'product_id, type_code, image_width, image_height, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'ProductArray_Load_Imagetype', 'product_array var, type_code, image_width, image_height, member') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'SQL', 'parameters var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Category_Product_Image', 'category_id, type_code, image_width, image_height, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'JSON_Output_Variable', 'value var, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'JSON_Output_Floats_Variable', 'value var, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Next_Weekday', 'timestamp, dow, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Page_Render_Variable', 'page_code, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Recently_Viewed_Products', 'customfield_name, max, current_product_code, type_code, image_width, image_height, image_member, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'ShippingMethodList_ForItems', 'basket var, items var, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Category_Tree_Image', 'category_id, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Category_Title_Image', 'category_id, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Scheduled_Promo_PriceGroup', 'pricegroup_name, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Readytheme_Load_ContentSection_WithoutDiv_Variable', 'code, all_settings var, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Readytheme_Load_ContentSection_WithoutDiv', 'code, all_settings var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Free_Shipping_Qualifying', 'threshold, basket_total, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Group_By_Member', 'array var, member, results var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Hidden_Fields', 'fields') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Send_Email_Attachment_Custom', 'from, to, cc, subject, body_message, file_name, file_dir, file_location, result var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Products_Also_Purchased_Query', 'product_id, max, type_code, image_width, image_height, image_member, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<strong>Item Groups</strong>
			</div>
			<div class="devkit-function__docs">
				<p><strong>DKIG</strong> = Devkit Item Groups</p>

				<p>To use Item Groups, you must include a few hidden inputs. The only actions this will trigger on is <strong>ADPR</strong> and <strong>ADPM</strong>.</p>

				<p><strong>DKIG_Code</strong>: The value of this input will be the attribute code that will be used. <strong>Please Note</strong>: There is no validation on the text you send over (i.e. you could pass through text with spaces).</p>

				<p><strong>DKIG_Value</strong>: The value of the attribute. This will be stored in the <strong>data</strong> member.</p>

				<p>Example:<br />
					<pre>
						&lt;input type="hidden" name="DKIM_Code" value="My_Custom_Attribute_Code" /&gt;
						&lt;input type="hidden" name="DKIM_Value" value="My Custom Value" /&gt;
					</pre>
				</p>

				<p>If you want to tie the groups together when they are updated (this includes removal), you will need to include a hidden field in the form. <strong>Please Note</strong>: If you use this for the update function, it will also remove items if the update quantity is set to 0.</p>

				<p><strong>DKIM_Update</strong>: The value of this must be the custom attribute code that you want to use. It will find all basket items with the same <strong>attr_code</strong>, and <strong>data</strong> from the Item that was updated (g.Basket_Group). This only triggers on the following actions: <strong>QTYG</strong> and <strong>RGRP</strong>.</p>

				<p>Example:<br />
					<pre>
						&lt;input type="hidden" name="DKIM_Update" value="My_Custom_Attribute_Code" /&gt;
					</pre>
				</p>

				<p>You can seperate out basket groups into 2 arrays by using the function <strong>ItemGroup_Group_Items</strong>. This will output 2 arrays: <strong>Regular/ Non-Grouped Items</strong> and <strong>Grouped Items</strong>.</p>

			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'ItemGroup_Group_Items', 'items var, custom_attribute, regular_items var, grouped_items var') }">
			</div>
			<div class="devkit-function__docs">
				This function is used to seperate out `grouped` items. This would need to be used in conjunction with `Item Groups`.
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Create_Customer_Email_Password', 'email, password, password_confirm, messages var, redirect_to') }">
			</div>
			<div class="devkit-function__docs">
				Create a customer account with an email address, and password. There is validation on the email, password, and password confirmation. You can choose to redirect a customer after they have been successfully logged into their new account. If `redirect_to` is left blank (i.e. empty string), it will not redirect.
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'ReOrder_Order_Form', 'orderitems var, show_quantity_inputs, member') }">
			</div>
			<div class="devkit-function__docs">
				This function will assign all the hidden inputs needed to re-order the order to a specific member.<br />
				This will basically create an ADPM form, without the `&lt;form&gt;` tags wrapping it.<br />
				This will not work with items using Variant Basket Replace (module).
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Replace_Special_Characters', 'input_string, outputstring var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Product_Images_Srcset', 'product_id, type_code, image_width, image_height, output var') }">
			</div>
			<div class="devkit-function__docs">
				This will output to :src and :srcset in the output var.
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Assign_Member', 'variable var, member, value') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Assign_Index', 'array var, index, value') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Parse_URI', 'uri, return var') }">
			</div>
			<div class="devkit-function__docs">
				Returns the following members to the return var:<br />
				scheme, host, user, pass, path, query, fragment, subdomain, domain
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'URI_QueryStrings_To_Structure', 'uri, array, return var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'URI_Add_Replace_QueryString', 'uri, query_string, value, return var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'URI_Build_URI', 'uri var, output var') }">
			</div>
			<div class="devkit-function__docs">
				Builds a URI based on the variable passed. The following memebers will be used:
				scheme, user, pass, subdomain, domain, path, query, fragment
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'URI_Add_Replace_Subdomain', 'uri, new_subdomain, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'URI_Add_Replace_UserPass', 'uri, user, pass, output var') }">
			</div>
		</div>
	</MvIF>
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Utility_Head" PARAMETERS = "module var, tab" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.tab EQ 'DEVKIT' }">
		<style>
			.devkit-function-row {
				padding-bottom: 1rem;
				margin-bottom: 1rem;
				border-bottom: 1px solid #ccc;
			}
			.devkit-information {
				margin-top: 1rem;
			}
			.devkit-function pre {
				font-size: 13.6px;
			    background-color: #f6f8fa;
			    padding: 16px;
				font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace;
			}
		</style>
	</MvIF>
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Utility_Tabs" PARAMETERS = "module_var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = "DEVKIT:Devkit Functions" />
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Utility_Update" PARAMETERS = "module_var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Utility_Validate" PARAMETERS = "module_var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvCOMMENT>
| ============================
|	COMPONENT
| ============================
</MvCOMMENT>

<MvFUNCTION NAME = "ComponentModule_Initialize" PARAMETERS = "module var, item, all_settings var, settings var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Render_End" PARAMETERS = "module var, item, all_settings var, settings var, param" STANDARDOUTPUTLEVEL = "compresswhitespace">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Tabs" PARAMETERS = "module var, item, settings var" STANDARDOUTPUTLEVEL = "compresswhitespace">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Validate" PARAMETERS = "module var, item, field_prefix, fields var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Update" PARAMETERS = "module var, item, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Content" PARAMETERS = "module var, item, tab, load_fields, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "compresswhitespace">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Defaults" PARAMETERS = "module var, settings var" STANDARDOUTPUTLEVEL = "compresswhitespace">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Page_Assign" PARAMETERS = "module var, page var, item, settings var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Page_Unassign" PARAMETERS = "module var, page var, item, settings var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Prerender" PARAMETERS = "module var, item, all_settings var, settings var, param" STANDARDOUTPUTLEVEL = "compresswhitespace">
</MVFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Render_Start" PARAMETERS = "module var, item, settings var, item_settings var, param" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvIF EXPR = "{ NOT Parse_Function_Parameters( l.param, l.function_name, l.parameters, l.parameter_count ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	|	Parameters & Function check
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ( l.function_name EQ 'test' )											OR
					( l.function_name EQ 'format_currency' ) 								OR
					( l.function_name EQ 'upcharge' )										OR
					( l.function_name EQ 'variant_array' )									OR
					( l.function_name EQ 'date' )											OR
					( l.function_name EQ 'load_product' )									OR
					( l.function_name EQ 'product_load_imagetype' )							OR
					( l.function_name EQ 'productarray_load_imagetype' )					OR
					( l.function_name EQ 'sql' )											OR
					( l.function_name EQ 'category_product_image')							OR
					( l.function_name EQ 'json_output_variable' )							OR
					( l.function_name EQ 'json_output_floats_variable' )					OR
					( l.function_name EQ 'next_weekday' )									OR
					( l.function_name EQ 'page_render_variable' )							OR
					( l.function_name EQ 'recently_viewed_products' )						OR
					( l.function_name EQ 'shippingmethodlist_foritems' )					OR
					( l.function_name EQ 'category_tree_image' )							OR
					( l.function_name EQ 'category_title_image' )							OR
					( l.function_name EQ 'scheduled_promo_pricegroup' )						OR
					( l.function_name EQ 'readytheme_load_contentsection_nodiv_variable' )	OR
					( l.function_name EQ 'readytheme_load_contentsection_nodiv' )			OR
					( l.function_name EQ 'free_shipping_qualifying' )						OR
					( l.function_name EQ 'group_by_member' )								OR
					( l.function_name EQ 'hidden_fields' )									OR
					( l.function_name EQ 'send_email_attachment_custom' )					OR
					( l.function_name EQ 'products_also_purchased_query' )					OR
					( l.function_name EQ 'itemgroup_group_items' )							OR
					( l.function_name EQ 'create_customer_email_password' )					OR
					( l.function_name EQ 'reorder_order_form' )								OR
					( l.function_name EQ 'replace_special_characters' )						OR
					( l.function_name EQ 'product_images_srcset' )							OR
					( l.function_name EQ 'harlemshake' )									OR
					( l.function_name EQ 'assign_member')									OR
					( l.function_name EQ 'assign_index' )									OR
					( l.function_name EQ 'uri_querystrings_to_structure' )					OR
					( l.function_name EQ 'uri_add_replace_querystring' )					OR
					( l.function_name EQ 'parse_uri' )										OR
					( l.function_name EQ 'uri_build_uri' )									OR
					( l.function_name EQ 'uri_add_replace_subdomain' )						OR
					( l.function_name EQ 'uri_add_replace_userpass' )
				}">
		<MvCOMMENT>
		|
		|	We need to add checks for how many "Parameters" there are. - Tess
		|
		</MvCOMMENT>
		<MvASSIGN NAME = "l.new_param" VALUE = "{ l.function_name $ '( l.module, l.param, ' $ l.parameters $ ' )' }">
	</MvIF>
	
	<MvCOMMENT>
	|
	|	tagerror
	|	22, 3 = display
	|	22, 0 = no display
	|
	|	FOR DEBUGGING, leave as 22, 3
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ISNULL l.new_param }">
		<MvFUNCTIONRETURN VALUE = "" />
	</MvIF>

	<MvASSEMBLY>
		.string asm_0 "l.new_param"
		.string asm_1 "g.Module_Root"
		.string asm_2 "l.module"
		.string asm_3 "module"
		.string asm_4 "g.MvDO_Error"

			pushc		asm_1
			pushn
			pushc		asm_2
			pushn
			pushc		asm_3
			memb_ro
			cat
			pushc		asm_0
			pushn
			tagerror	22, 3
			do_function
			pop
			tagerror	22, 3
			pushc		asm_4
			pushn
			jmp_eq		L_asm_success
			retn
		L_asm_success:
	</MvASSEMBLY>

</MvFUNCTION>

<MvCOMMENT>
|
|	Component Helpers
|		Parse_Function_Parameters( string, function_name var, parameters var, parameter_count var )
|		Parameter_Error( param, message )
|		Is_Variable( variable var )
|		Pretty_Code( function_name, paramaters )
|
|	functions.mv
|		All Devkit functions
|
|	item_groups.mv
|		Helper functions for `Item Groups`
|
</MvCOMMENT>


<MvINCLUDE FILE = "functions.mv">
<MvINCLUDE FILE = "item_groups.mv">


<MvFUNCTION NAME = "Parse_Function_Parameters" PARAMETERS = "string, function_name var, parameters var, parameter_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.parameter_count" 	VALUE = 0>
	<MvASSIGN NAME = "l.loop_counter" 		VALUE = 0>
	<MvASSIGN NAME = "l.string" 			VALUE = "{ trim( l.string ) }">
	<MvASSIGN NAME = "l.starting_pos" 		VALUE = "{ indexof( '(', l.string, 1 ) + 1 }">
	<MvASSIGN NAME = "l.function_name" 		VALUE = "{ tolower( substring_var( l.string, 1, l.starting_pos - 2 ) ) }">

	<MvIF EXPR = "{ l.starting_pos EQ 1 }">
		<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.string, 'Expected \'(\' to start the function call' ) }">
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.function_name }">
		<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.string, 'Missing function name' ) }">
	</MvIF>

	<MvIF EXPR = "{ substring_var( l.string, len_var( l.string ), 1 ) NE ')' }">
		<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.string, 'Expected \')\' to end the function call' ) }">
	</MvIF>

	<MvWHILE EXPR = "{ 1 }">
		<MvASSIGN NAME = "l.quote_pos" 		VALUE = "{ indexof( '\'', l.string, l.starting_pos ) }">
		<MvASSIGN NAME = "l.end_quote_pos" 	VALUE = "{ indexof( '\'', l.string, l.quote_pos + 1 ) }">
		<MvASSIGN NAME = "l.comma_pos" 		VALUE = "{ indexof( ',', l.string, l.starting_pos ) }">

		<MvIF EXPR = "{ l.quote_pos AND NOT l.end_quote_pos }">
			<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.string, 'Missing single quote' ) }">
		</MvIF>

		<MvWHILE EXPR = "{ ( l.comma_pos LT l.end_quote_pos ) AND ( l.comma_pos GT l.quote_pos ) }"> <MvCOMMENT> comma in a quoted string </MvCOMMENT>
			<MvASSIGN NAME = "l.comma_pos" VALUE = "{ indexof( ',', l.string, l.comma_pos + 1 ) }">
		</MvWHILE>

		<MvIF EXPR = "{ l.comma_pos EQ 0 }"> <MvCOMMENT> on the last parameter or we only have 1 parameter </MvCOMMENT>
			<MvASSIGN NAME = "l.start" 			VALUE = "{ l.starting_pos }">
			<MvASSIGN NAME = "l.end" 			VALUE = "{ len_var( l.string ) - l.starting_pos }">
			<MvASSIGN NAME = "l.starting_pos" 	VALUE = "{ len_var( l.string ) }">
			<MvASSIGN NAME = "l.quote_pos" 		VALUE = 0>
		<MvELSE> <MvCOMMENT> if there are more commas to come, grab from the start to the comma</MvCOMMENT>
			<MvASSIGN NAME = "l.start" 			VALUE = "{ l.starting_pos }">
			<MvASSIGN NAME = "l.end" 			VALUE = "{ l.comma_pos - l.starting_pos }">
			<MvASSIGN NAME = "l.starting_pos" 	VALUE = "{ l.comma_pos + 1 }">
		</MvIF>

		<MvASSIGN NAME = "l.param" VALUE = "{ trim( substring_var( l.string, l.start, l.end ) ) }">

		<MvIF EXPR = "{ ISNULL l.param }">
			<MvIF EXPR = "{ l.comma_pos EQ 0 AND l.parameter_count EQ 0 }">
				<MvFUNCTIONRETURN VALUE = 1>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.string, 'Parameter number ' $ ( ++l.parameter_count ) $ ' cannot be empty' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.parameters" INDEX = "{ ++l.parameter_count }" VALUE = "{ l.param }">

		<MvIF EXPR = "{ l.quote_pos EQ 0 AND l.comma_pos EQ 0 }">
			<MvWHILESTOP>
		</MvIF>

		<MvIF EXPR = "{ l.loop_counter GT 1000 }">
			<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.string, 'Error parsing parameters' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.loop_counter" VALUE = "{ l.loop_counter + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Parameter_Error" PARAMETERS = "param, message" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.error_count"														VALUE = "{ miva_array_elements( g.Session:wailist ) }">
	<MvASSIGN NAME = "g.Session:dev_util" INDEX = "{ l.error_count + 1 }" MEMBER = "param"	VALUE = "{ l.param }">
	<MvASSIGN NAME = "g.Session:dev_util" INDEX = "{ l.error_count + 1 }" MEMBER = "message"	VALUE = "{ l.message }">

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "Is_Variable" PARAMETERS = "variable var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.valid_chars" 		VALUE = "_.: ">
	<MvASSIGN NAME = "l.square_bracket_pos" VALUE = 0>
	<MvASSIGN NAME = "l.bracket_count" 		VALUE = 0>

	<MvFOR INDEX = "l.pos" COUNT = "{ len_var( l.variable ) }">
		<MvASSIGN NAME = "l.char" VALUE = "{ substring_var( l.variable, l.pos, 1 ) }">

		<MvIF EXPR = "{ l.pos EQ 1 }">
			<MvIF EXPR = "{ ( NOT isalpha( l.char ) ) AND
							( l.char NE '_' ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFORCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ l.char EQ '[' }">
			<MvASSIGN NAME = "l.bracket_count" 				VALUE = "{ l.bracket_count + 1 }">
			<MvASSIGN NAME = "l.opening_square_bracket_pos" VALUE = "{ indexof( '[', l.variable, l.pos + 1 ) }">
			<MvASSIGN NAME = "l.closing_square_bracket_pos" VALUE = "{ indexof( ']', l.variable, l.pos ) }">

			<MvIF EXPR = "{ ( l.opening_square_bracket_pos GT 0 ) AND
							( l.opening_square_bracket_pos LT l.closing_square_bracket_pos ) }">
				<MvASSIGN NAME = "l.pos" VALUE = "{ l.opening_square_bracket_pos - 1 }">
			<MvELSEIF EXPR = "{ l.closing_square_bracket_pos GT 0 }">
				<MvASSIGN NAME = "l.pos" VALUE = "{ l.closing_square_bracket_pos - 1 }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.char EQ ']' }">
			<MvASSIGN NAME = "l.bracket_count" 				VALUE = "{ l.bracket_count - 1 }">
			<MvASSIGN NAME = "l.opening_square_bracket_pos" VALUE = "{ indexof( '[', l.variable, l.pos ) }">
			<MvASSIGN NAME = "l.closing_square_bracket_pos" VALUE = "{ indexof( ']', l.variable, l.pos + 1 ) }">

			<MvIF EXPR = "{ ( l.opening_square_bracket_pos GT 0 ) AND
							( l.opening_square_bracket_pos LT l.closing_square_bracket_pos ) }">
				<MvASSIGN NAME = "l.pos" VALUE = "{ l.opening_square_bracket_pos - 1 }">
			<MvELSEIF EXPR = "{ l.closing_square_bracket_pos GT 0 }">
				<MvASSIGN NAME = "l.pos" VALUE = "{ l.closing_square_bracket_pos - 1 }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ ( NOT isdigit( l.char ) ) AND
							( NOT isalpha( l.char ) ) AND
							( NOT ( l.char IN l.valid_chars ) ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOR>

	<MvIF EXPR = "{ l.bracket_count NE 0 }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Pretty_Code" PARAMETERS = "function_name, parameters" STANDARDOUTPUTLEVEL = "html, text">
<div style="background: #ffffff; overflow:auto;width:auto;padding:.2em 0;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #446fbd">&lt;mvt:item</span> <span style="color: #6d8600">name=</span><span style="color: #535353">&quot;devkit&quot;</span> <span style="color: #6d8600">param=</span><span style="color: #535353">&quot;<span style="color: #446fbd"><MvEVAL EXPR = "{ l.function_name }"></span>( <MvEVAL EXPR = "{ l.parameters }"> )&quot;</span> <span style="color: #446fbd">/&gt;</span></pre>
</div>
</MvFUNCTION>