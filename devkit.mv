<MvFUNCTION NAME = "Module_Description" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvASSIGN NAME = "l.module:code"		VALUE = "devkit">
	<MvASSIGN NAME = "l.module:name"		VALUE = "Devkit">
	<MvASSIGN NAME = "l.module:provider"	VALUE = "Steven Soule and Tess Guefen">
	<MvASSIGN NAME = "l.module:version"		VALUE = "1.000">
	<MvASSIGN NAME = "l.module:api_ver"		VALUE = "9.00">
	<MvASSIGN NAME = "l.module:description"	VALUE = "Super Fantastic Awesome Magic Fireworks developer toolkit.">
	<MvASSIGN NAME = "l.module:features"	VALUE = "util, vis_util, component">
</MvFUNCTION>


<MvCOMMENT>
| ========================================================================================================================
|	VIS_UTIL
| ========================================================================================================================
</MvCOMMENT>

<MvFUNCTION NAME = "StoreUtilityModule_Action" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvFUNCTION NAME = "StoreUtilityModule_LeftNavigation" PARAMETERS = "module var, ident" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvFUNCTION NAME = "StoreUtilityModule_Screen" PARAMETERS = "module_var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvFUNCTION NAME = "StoreUtilityModule_Validate" PARAMETERS = "module_var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>


<MvCOMMENT>
| ========================================================================================================================
|	VIS_UTIL
| ========================================================================================================================
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Utility_Content" PARAMETERS = "module var, tab, load_fields" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.tab EQ 'DEVKIT' }">
		<h1>List of Functions</h1>
		<h3>This should be made pretty later.</h3>
		<hr />
		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Format_Currency', 'price, formatted_price var') }">
			</div>
			<div class="devkit-information">
				This is more info on the function...blahblahblah. Style and fill this out later with examples.
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Upcharge', 'charge_name, charge_type, amount, tax_exempt') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Variant_Array', 'product_id, variants var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Date', 'format, timestamp, return var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Load_Product', 'options var, product var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Product_Load_Imagetype', 'product_id, type_code, image_width, image_height, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Product_Load_Imagetype', 'product_array var, type_code, image_width, image_height, member') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'SQL', 'parameters var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Category_Product_Image', 'category_id, type_code, image_width, image_height, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'JSON_Output_Variable', 'value var, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'JSON_Output_Floats_Variable', 'value var, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Next_Weekday', 'timestamp, dow, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Page_Render_Variable', 'page_code, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Recently_Viewed_Products', 'customfield_name, max, current_product_code, type_code, image_width, image_height, image_member, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'ShippingMethodList_ForItems', 'basket var, items var, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Category_Tree_Image', 'category_id, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Category_Title_Image', 'category_id, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Scheduled_Promo_PriceGroup', 'pricegroup_name, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Readytheme_Load_ContentSection_WithoutDiv_Variable', 'code, all_settings var, output var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Readytheme_Load_ContentSection_WithoutDiv', 'code, all_settings var') }">
			</div>
		</div>

		<div class="devkit-function-row">
			<div class="devkit-function">
				<MvEVAL EXPR = "{ Pretty_Code( 'Free_Shipping_Qualifying', 'threshold, basket_total, output var') }">
			</div>
		</div>

	</MvIF>
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Utility_Head" PARAMETERS = "module var, tab" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.tab EQ 'DEVKIT' }">
		<style>
			.devkit-function-row {
				padding-bottom: 1rem;
				margin-bottom: 1rem;
				border-bottom: 1px solid #ccc;
			}
			.devkit-information {
				margin-top: 1rem;
			}
			.devkit-function pre {
				font-size: 13.6px;
			    background-color: #f6f8fa;
			    padding: 16px;
				font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace;
			}
		</style>
	</MvIF>
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Utility_Tabs" PARAMETERS = "module_var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = "DEVKIT:Devkit Functions" />
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Utility_Update" PARAMETERS = "module_var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Utility_Validate" PARAMETERS = "module_var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvCOMMENT>
| ============================
|	COMPONENT
| ============================
</MvCOMMENT>

<MvFUNCTION NAME = "ComponentModule_Initialize" PARAMETERS = "module var, item, all_settings var, settings var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Render_End" PARAMETERS = "module var, item, all_settings var, settings var, param" STANDARDOUTPUTLEVEL = "compresswhitespace">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Tabs" PARAMETERS = "module var, item, settings var" STANDARDOUTPUTLEVEL = "compresswhitespace">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Validate" PARAMETERS = "module var, item, field_prefix, fields var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Update" PARAMETERS = "module var, item, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Content" PARAMETERS = "module var, item, tab, load_fields, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "compresswhitespace">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Defaults" PARAMETERS = "module var, settings var" STANDARDOUTPUTLEVEL = "compresswhitespace">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Page_Assign" PARAMETERS = "module var, page var, item, settings var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Page_Unassign" PARAMETERS = "module var, page var, item, settings var" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Prerender" PARAMETERS = "module var, item, all_settings var, settings var, param" STANDARDOUTPUTLEVEL = "compresswhitespace">
</MVFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Render_Start" PARAMETERS = "module var, item, settings var, item_settings var, param" STANDARDOUTPUTLEVEL = "compresswhitespace">
	<MvIF EXPR = "{ NOT Parse_Function_Parameters( l.param, l.function_name, l.parameters, l.parameter_count ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvCOMMENT>
	|
	|	Parameters & Function check
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ( l.function_name EQ 'test' )											OR
					( l.function_name EQ 'format_currency' ) 								OR
					( l.function_name EQ 'upcharge' )										OR
					( l.function_name EQ 'variant_array' )									OR
					( l.function_name EQ 'date' )											OR
					( l.function_name EQ 'load_product' )									OR
					( l.function_name EQ 'product_load_imagetype' )							OR
					( l.function_name EQ 'productarray_load_imagetype' )					OR
					( l.function_name EQ 'sql' )											OR
					( l.function_name EQ 'category_product_image')							OR
					( l.function_name EQ 'json_output_variable' )							OR
					( l.function_name EQ 'json_output_floats_variable' )					OR
					( l.function_name EQ 'next_weekday' )									OR
					( l.function_name EQ 'page_render_variable' )							OR
					( l.function_name EQ 'recently_viewed_products' )						OR
					( l.function_name EQ 'shippingmethodlist_foritems' )					OR
					( l.function_name EQ 'category_tree_image' )							OR
					( l.function_name EQ 'category_title_image' )							OR
					( l.function_name EQ 'scheduled_promo_pricegroup' )						OR
					( l.function_name EQ 'readytheme_load_contentsection_nodiv_variable' )	OR
					( l.function_name EQ 'readytheme_load_contentsection_nodiv' )			OR
					( l.function_name EQ 'free_shipping_qualifying' )
				}">
		<MvCOMMENT>
		|
		|	We need to add checks for how many "Parameters" there are. - Tess
		|
		</MvCOMMENT>
		<MvASSIGN NAME = "l.new_param" VALUE = "{ l.function_name $ '( l.module, l.param, ' $ l.parameters $ ' )' }">
	</MvIF>
	
	<MvCOMMENT>
	|
	|	tagerror
	|	22, 3 = display
	|	22, 0 = no display
	|
	|	FOR DEBUGGING, leave as 22, 3
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ ISNULL l.new_param }">
		<MvFUNCTIONRETURN VALUE = "" />
	</MvIF>

	<MvASSEMBLY>
		.string asm_0 "l.new_param"
		.string asm_1 "g.Module_Root"
		.string asm_2 "l.module"
		.string asm_3 "module"
		.string asm_4 "g.MvDO_Error"

			pushc		asm_1
			pushn
			pushc		asm_2
			pushn
			pushc		asm_3
			memb_ro
			cat
			pushc		asm_0
			pushn
			tagerror	22, 3
			do_function
			pop
			tagerror	22, 3
			pushc		asm_4
			pushn
			jmp_eq		L_asm_success
			retn
		L_asm_success:
	</MvASSEMBLY>

</MvFUNCTION>

<MvCOMMENT>
|
|	Component Helpers
|		Parse_Function_Parameters( string, function_name var, parameters var, parameter_count var )
|		Parameter_Error( param, message )
|		Is_Variable( variable var )
|		Pretty_Code( function_name, paramaters )
|
|	functions.mv
|		All Devkit functions
|
</MvCOMMENT>


<MvINCLUDE FILE = "functions.mv">


<MvFUNCTION NAME = "Parse_Function_Parameters" PARAMETERS = "string, function_name var, parameters var, parameter_count var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.parameter_count" 	VALUE = 0>
	<MvASSIGN NAME = "l.loop_counter" 		VALUE = 0>
	<MvASSIGN NAME = "l.string" 			VALUE = "{ trim( l.string ) }">
	<MvASSIGN NAME = "l.starting_pos" 		VALUE = "{ indexof( '(', l.string, 1 ) + 1 }">
	<MvASSIGN NAME = "l.function_name" 		VALUE = "{ tolower( substring_var( l.string, 1, l.starting_pos - 2 ) ) }">

	<MvIF EXPR = "{ l.starting_pos EQ 1 }">
		<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.string, 'Expected \'(\' to start the function call' ) }">
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.function_name }">
		<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.string, 'Missing function name' ) }">
	</MvIF>

	<MvIF EXPR = "{ substring_var( l.string, len_var( l.string ), 1 ) NE ')' }">
		<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.string, 'Expected \')\' to end the function call' ) }">
	</MvIF>

	<MvWHILE EXPR = "{ 1 }">
		<MvASSIGN NAME = "l.quote_pos" 		VALUE = "{ indexof( '\'', l.string, l.starting_pos ) }">
		<MvASSIGN NAME = "l.end_quote_pos" 	VALUE = "{ indexof( '\'', l.string, l.quote_pos + 1 ) }">
		<MvASSIGN NAME = "l.comma_pos" 		VALUE = "{ indexof( ',', l.string, l.starting_pos ) }">

		<MvIF EXPR = "{ l.quote_pos AND NOT l.end_quote_pos }">
			<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.string, 'Missing single quote' ) }">
		</MvIF>

		<MvWHILE EXPR = "{ ( l.comma_pos LT l.end_quote_pos ) AND ( l.comma_pos GT l.quote_pos ) }"> <MvCOMMENT> comma in a quoted string </MvCOMMENT>
			<MvASSIGN NAME = "l.comma_pos" VALUE = "{ indexof( ',', l.string, l.comma_pos + 1 ) }">
		</MvWHILE>

		<MvIF EXPR = "{ l.comma_pos EQ 0 }"> <MvCOMMENT> on the last parameter or we only have 1 parameter </MvCOMMENT>
			<MvASSIGN NAME = "l.start" 			VALUE = "{ l.starting_pos }">
			<MvASSIGN NAME = "l.end" 			VALUE = "{ len_var( l.string ) - l.starting_pos }">
			<MvASSIGN NAME = "l.starting_pos" 	VALUE = "{ len_var( l.string ) }">
			<MvASSIGN NAME = "l.quote_pos" 		VALUE = 0>
		<MvELSE> <MvCOMMENT> if there are more commas to come, grab from the start to the comma</MvCOMMENT>
			<MvASSIGN NAME = "l.start" 			VALUE = "{ l.starting_pos }">
			<MvASSIGN NAME = "l.end" 			VALUE = "{ l.comma_pos - l.starting_pos }">
			<MvASSIGN NAME = "l.starting_pos" 	VALUE = "{ l.comma_pos + 1 }">
		</MvIF>

		<MvASSIGN NAME = "l.param" VALUE = "{ trim( substring_var( l.string, l.start, l.end ) ) }">

		<MvIF EXPR = "{ ISNULL l.param }">
			<MvIF EXPR = "{ l.comma_pos EQ 0 AND l.parameter_count EQ 0 }">
				<MvFUNCTIONRETURN VALUE = 1>
			</MvIF>

			<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.string, 'Parameter number ' $ ( ++l.parameter_count ) $ ' cannot be empty' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.parameters" INDEX = "{ ++l.parameter_count }" VALUE = "{ l.param }">

		<MvIF EXPR = "{ l.quote_pos EQ 0 AND l.comma_pos EQ 0 }">
			<MvWHILESTOP>
		</MvIF>

		<MvIF EXPR = "{ l.loop_counter GT 1000 }">
			<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.string, 'Error parsing parameters' ) }">
		</MvIF>

		<MvASSIGN NAME = "l.loop_counter" VALUE = "{ l.loop_counter + 1 }">
	</MvWHILE>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Parameter_Error" PARAMETERS = "param, message" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.error_count"														VALUE = "{ miva_array_elements( g.Session:wailist ) }">
	<MvASSIGN NAME = "g.Session:dev_util" INDEX = "{ l.error_count + 1 }" MEMBER = "param"	VALUE = "{ l.param }">
	<MvASSIGN NAME = "g.Session:dev_util" INDEX = "{ l.error_count + 1 }" MEMBER = "message"	VALUE = "{ l.message }">

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "Is_Variable" PARAMETERS = "variable var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.valid_chars" 		VALUE = "_.: ">
	<MvASSIGN NAME = "l.square_bracket_pos" VALUE = 0>
	<MvASSIGN NAME = "l.bracket_count" 		VALUE = 0>

	<MvFOR INDEX = "l.pos" COUNT = "{ len_var( l.variable ) }">
		<MvASSIGN NAME = "l.char" VALUE = "{ substring_var( l.variable, l.pos, 1 ) }">

		<MvIF EXPR = "{ l.pos EQ 1 }">
			<MvIF EXPR = "{ ( NOT isalpha( l.char ) ) AND
							( l.char NE '_' ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvFORCONTINUE>
		</MvIF>

		<MvIF EXPR = "{ l.char EQ '[' }">
			<MvASSIGN NAME = "l.bracket_count" 				VALUE = "{ l.bracket_count + 1 }">
			<MvASSIGN NAME = "l.opening_square_bracket_pos" VALUE = "{ indexof( '[', l.variable, l.pos + 1 ) }">
			<MvASSIGN NAME = "l.closing_square_bracket_pos" VALUE = "{ indexof( ']', l.variable, l.pos ) }">

			<MvIF EXPR = "{ ( l.opening_square_bracket_pos GT 0 ) AND
							( l.opening_square_bracket_pos LT l.closing_square_bracket_pos ) }">
				<MvASSIGN NAME = "l.pos" VALUE = "{ l.opening_square_bracket_pos - 1 }">
			<MvELSEIF EXPR = "{ l.closing_square_bracket_pos GT 0 }">
				<MvASSIGN NAME = "l.pos" VALUE = "{ l.closing_square_bracket_pos - 1 }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.char EQ ']' }">
			<MvASSIGN NAME = "l.bracket_count" 				VALUE = "{ l.bracket_count - 1 }">
			<MvASSIGN NAME = "l.opening_square_bracket_pos" VALUE = "{ indexof( '[', l.variable, l.pos ) }">
			<MvASSIGN NAME = "l.closing_square_bracket_pos" VALUE = "{ indexof( ']', l.variable, l.pos + 1 ) }">

			<MvIF EXPR = "{ ( l.opening_square_bracket_pos GT 0 ) AND
							( l.opening_square_bracket_pos LT l.closing_square_bracket_pos ) }">
				<MvASSIGN NAME = "l.pos" VALUE = "{ l.opening_square_bracket_pos - 1 }">
			<MvELSEIF EXPR = "{ l.closing_square_bracket_pos GT 0 }">
				<MvASSIGN NAME = "l.pos" VALUE = "{ l.closing_square_bracket_pos - 1 }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ ( NOT isdigit( l.char ) ) AND
							( NOT isalpha( l.char ) ) AND
							( NOT ( l.char IN l.valid_chars ) ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOR>

	<MvIF EXPR = "{ l.bracket_count NE 0 }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Pretty_Code" PARAMETERS = "function_name, parameters" STANDARDOUTPUTLEVEL = "html, text">
<div style="background: #ffffff; overflow:auto;width:auto;padding:.2em 0;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #446fbd">&lt;mvt:item</span> <span style="color: #6d8600">name=</span><span style="color: #535353">&quot;devkit&quot;</span> <span style="color: #6d8600">param=</span><span style="color: #535353">&quot;<span style="color: #446fbd"><MvEVAL EXPR = "{ l.function_name }"></span>( <MvEVAL EXPR = "{ l.parameters }"> )&quot;</span> <span style="color: #446fbd">/&gt;</span></pre>
</div>
</MvFUNCTION>