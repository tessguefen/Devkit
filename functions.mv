<MvCOMMENT>
|
|	Custom Functions per Item
|
|	Function Setup:
|
|	<MvFUNCTION NAME = "XXXXX"  PARAMETERS = "module var, param, param_1, param_2, param_3, etc var" STANDARDOUTPUTLEVEL = "">
|
|
</MvCOMMENT>

<MvFUNCTION NAME = "Test" PARAMETERS = "module var, param, test_the_first, test_the_second, destination var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.destination" VALUE = "Helllo world">
</MvFUNCTION>

<MvFUNCTION NAME = "Format_Currency" PARAMETERS = "module var, param, plain_price, formatted_price var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Format_Currency( plain_price, formatted_price var )
	|
	</MvCOMMENT>

	<MvDO FILE = "{ g.Module_Root $ g.Store:currncy_mod:module }" NAME = "l.formatted_price" VALUE = "{ CurrencyModule_AddFormatting( g.Store:currncy_mod, l.plain_price ) }" />
</MvFUNCTION>

<MvFUNCTION NAME = "Upcharge" PARAMETERS = "module var, param, charge_name, charge_type, amount, tax_exempt" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Upcharge( charge_name, charge_type, amount, tax_exempt )
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].BasketCharge_Delete_All_Type( g.Basket:basket_id, l.charge_type ) }">
		<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.param, 'An error occured' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.amount GT 0 }">
		<MvASSIGN NAME = "l.basket_charge:basket_id"	VALUE = "{ g.Basket:basket_id }">
		<MvASSIGN NAME = "l.basket_charge:type"			VALUE = "{ l.charge_type }">
		<MvASSIGN NAME = "l.basket_charge:descrip"		VALUE = "{ l.charge_name }">
		<MvASSIGN NAME = "l.basket_charge:amount"		VALUE = "{ l.amount }">
		<MvASSIGN NAME = "l.basket_charge:disp_amt"		VALUE = "{ l.amount }">
		<MvASSIGN NAME = "l.basket_charge:tax_exempt"	VALUE = "{ l.tax_exempt }">
		<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.sucess" VALUE = "{ BasketCharge_Insert( l.basket_charge ) }">
	</MvIF>

	<MvCOMMENT>
	|
	|	Refresh the Basket Charges & Basket Total
	|
	</MvCOMMENT>

	<MvFOREACH ITERATOR = "l.charge" ARRAY = "l.charges" COUNT = "{ [ g.Module_Library_DB ].BasketChargeList_Load_Basket( g.Basket:basket_id, l.charges ) }">
		<MvDO FILE = "{ g.Module_Root $ g.Store:currncy_mod:module }" NAME = "l.charge:formatted_amount" VALUE = "{ CurrencyModule_AddFormatting( g.Store:currncy_mod, l.charge:amount ) }" />
		<MvDO FILE = "{ g.Module_Root $ g.Store:currncy_mod:module }" NAME = "l.charge:formatted_disp_amt" VALUE = "{ CurrencyModule_AddFormatting( g.Store:currncy_mod, l.charge:disp_amt ) }" />
	</MvFOREACH>
	<MvASSIGN NAME = "l.all_settings:basket:charges" VALUE = "{ l.charges }">

	<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.all_settings:basket:total" VALUE = "{ Basket_Total( g.Basket:basket_id ) }">
	<MvDO FILE = "{ g.Module_Store_Module_Currency }" NAME = "l.all_settings:basket:formatted_total" VALUE = "{ CurrencyModule_AddFormatting( g.Store_Module_Currency, l.all_settings:basket:total ) }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Variant_Array" PARAMETERS = "module var, param, product_id, variants var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Variant_Array( product_id, variants var )
	|	Yaaaas, Kween.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_ID( l.product_id, l.loaded_product ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW	= "ProductVariants"
				QUERY	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'ProductVariants WHERE product_id = ? GROUP BY variant_id' }"
				FIELDS	= "l.product_id">
	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Library_Filename_Utilities ].Error( 'MER-DBE-ATT-00009', g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.variant_count" VALUE = 0>
	<MvWHILE EXPR = "{ NOT ProductVariants.d.EOF }">
		<MvASSIGN NAME = "l.variant_count"												VALUE = "{ l.variant_count + 1 }">
		
		<MvASSIGN NAME = "l.variants" INDEX = "{ l.variant_count }" MEMBER = "product_id"	VALUE = "{ ProductVariants.d.product_id }">
		<MvASSIGN NAME = "l.variants" INDEX = "{ l.variant_count }" MEMBER = "variant_id"	VALUE = "{ ProductVariants.d.variant_id }">
		<MvASSIGN NAME = "l.variants" INDEX = "{ l.variant_count }" MEMBER = "dimensions"	VALUE = "{ ProductVariants.d.dimensions }">
		<MvASSIGN NAME = "l.variants" INDEX = "{ l.variant_count }" MEMBER = "part_count"	VALUE = "{ ProductVariants.d.part_count }">

		<MvSKIP NAME = "Merchant" VIEW = "ProductVariants" ROWS = 1>
	</MvWHILE>
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "ProductVariants">

	<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.success" VALUE = "{ Product_Load_ID( l.product_id, l.master_product ) }">

	<MvFOREACH ITERATOR = "l.variant" ARRAY = "l.variants" INDEX = "l.vpos">
		<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.success" VALUE = "{ ProductList_Load_Variant( l.variant:product_id, l.variant:variant_id, l.variant:parts ) }">
		<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.success" VALUE = "{ ProductVariantList_Load_Variant( l.variant:product_id, l.variant:variant_id, l.variant:attributes ) }">

		<MvASSIGN NAME = "l.variant:overall_inventory" VALUE = "{ l.master_product }">
		<MvDO FILE = "{ g.Module_Feature_INV_RT }" NAME = "l.success" VALUE = "{ Inventory_Load_Variant( l.variant:overall_inventory, l.variant:variant_id ) }">

		<MvFOREACH ITERATOR = "l.attribute" ARRAY = "l.variant:attributes">
			<MvASSIGN NAME = "l.attribute:dimensions" VALUE = "">
			<MvASSIGN NAME = "l.attribute:variant_id" VALUE = "">
			<MvASSIGN NAME = "l.attribute:product_id" VALUE = "">
			<MvASSIGN NAME = "l.attribute:part_count" VALUE = "">

			<MvIF EXPR = "{ l.attribute:attmpat_id GT 0 }">
				<MvDO FILE = "{ g.Module_Feature_ATT_DB }" NAME = "l.success" VALUE = "{ AttributeTemplateAttr_Load_ID( l.attribute:attmpat_id, l.attribute:attr ) }">
				<MvDO FILE = "{ g.Module_Feature_ATT_DB }" NAME = "l.success" VALUE = "{ AttributeTemplate_Load_ID( l.attribute:attr:attemp_id, l.attribute:template ) }">
				<MvIF EXPR = "{ l.attribute:option_id GT 0 }">
					<MvDO FILE = "{ g.Module_Feature_ATT_DB }" NAME = "l.success" VALUE = "{ AttributeTemplateOption_Load_ID( l.attribute:option_id, l.attribute:option ) }">
				</MvIF>
			<MvELSE>
				<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.success" VALUE = "{ Attribute_Load_ID( l.attribute:attr_id, l.attribute:attr ) }">
				<MvIF EXPR = "{ l.attribute:option_id GT 0 }">
					<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.success" VALUE = "{ Option_Load_ID( l.attribute:option_id, l.attribute:option ) }">
				</MvIF>
			</MvIF>
		</MvFOREACH>
	</MvFOREACH>
</MvFUNCTION>


<MvFUNCTION NAME = "Date" PARAMETERS = "module var, param, format, timestamp, return var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Date( format, timestamp, return var )
	|
	</MvCOMMENT>


	<MvCOMMENT>
	|
	| Using some of PHP's Date Formatting
	|
	|	DAY
	|		d, j, N, S, z, l, D
	|
	|	MONTH
	|		m, n, F, M
	|
	|	YEAR
	|		Y, y, L
	|
	|	TIME
	|		a, A, g, G, h, H, i, s
	|
	|	FULL DATE/TIME
	|		c
	|
	</MvCOMMENT>


	<MvASSIGN NAME = "l.time_zone"	VALUE = "{ g.Merchant_Local_Timezone }">

	<MvASSIGN NAME = "l.output" VALUE = "">

	<MvASSIGN NAME = "l.months_long" VALUE = "{ miva_array_deserialize( 'January,February,March,April,May,June,July,August,September,October,November,December' ) }">
	<MvASSIGN NAME = "l.months_short" VALUE = "{ miva_array_deserialize( 'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sept,Oct,Nov,Dec' ) }">

	<MvASSIGN NAME = "l.days_long" VALUE = "{ miva_array_deserialize( 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday' ) }">
	<MvASSIGN NAME = "l.days_short" VALUE = "{ miva_array_deserialize( 'Sun,Mon,Tues,Wed,Thurs,Fri,Sat' ) }">

	<MvFOR INDEX = "l.pos" COUNT = "{ len_var( l.format ) }">
		<MvASSIGN NAME = "l.char" VALUE = "{ substring_var( l.format, l.pos, 1 ) }">

		<MvIF EXPR = "{ NOT ( l.char CIN 'djNSzlDmnFMYyLaAgGhHisc' ) }">
			<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ l.char }">
			<MvFORCONTINUE />
		</MvIF>

		<MvIF EXPR = "{ l.char EQ 'd' }">
			<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ padl( time_t_dayofmonth( l.timestamp, l.time_zone ), 2, 0 ) }">
		<MvELSEIF EXPR = "{ l.char EQ 'j' }">
			<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ time_t_dayofmonth( l.timestamp, l.time_zone ) }">
		<MvELSEIF EXPR = "{ l.char EQ 'N' }">
			<MvCOMMENT>
			|
			| (Sunday=1) :|
			|
			</MvCOMMENT>
			<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ time_t_dayofweek( l.timestamp, l.time_zone ) }">
		<MvELSEIF EXPR = "{ l.char EQ 'S' }">
			<MvASSIGN NAME = "l.dow" VALUE = "{ time_t_dayofmonth( l.timestamp, l.time_zone ) }">
			<MvASSIGN NAME = "l.dow_a" VALUE = "{ l.dow MOD 10 }">
			<MvASSIGN NAME = "l.dow_b" VALUE = "{ l.dow MOD 100 }">

			<MvIF EXPR = "{ ( l.dow_a EQ 1 ) AND ( l.dow_b NE 11) }">
				<MvASSIGN NAME = "l.S" VALUE = "st">
			<MvELSEIF EXPR = "{ ( l.dow_a EQ 2) AND ( l.dow_b NE 12 ) }">
				<MvASSIGN NAME = "l.S" VALUE = "nd">
			<MvELSEIF EXPR = "{ ( l.dow_a EQ 3 ) AND ( l.dow_b NE 13 ) }">
				<MvASSIGN NAME = "l.S" VALUE = "rd">
			<MvELSE>
				<MvASSIGN NAME = "l.S" VALUE = "th">
			</MvIF>
			<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ l.S }">
		<MvELSEIF EXPR = "{ l.char EQ 'z' }">
			<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ time_t_dayofyear( l.timestamp, l.time_zone ) }">
		<MvELSEIF EXPR = "{ l.char EQ 'D' }">
			<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ miva_variable_value( 'l.days_short[ ' $ time_t_dayofweek( l.timestamp, l.time_zone ) $ ' ]') }">
		<MvELSEIF EXPR = "{ l.char EQ 'l' }">
			<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ miva_variable_value( 'l.days_long[ ' $ time_t_dayofweek( l.timestamp, l.time_zone ) $ ' ]') }">
		<MvELSEIF EXPR = "{ l.char EQ 'm' }">
			<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ padl( time_t_month( l.timestamp, l.time_zone ), 2, 0 ) }">
		<MvELSEIF EXPR = "{ l.char EQ 'n' }">
			<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ time_t_month( l.timestamp, l.time_zone ) }">
		<MvELSEIF EXPR = "{ l.char EQ 'F' }">
			<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ miva_variable_value( 'l.months_long[ ' $ time_t_month( l.timestamp, l.time_zone ) $ ' ]') }">
		<MvELSEIF EXPR = "{ l.char EQ 'M' }">
			<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ miva_variable_value( 'l.months_short[ ' $ time_t_month( l.timestamp, l.time_zone ) $ ' ]') }">
		<MvELSEIF EXPR = "{ l.char EQ 'Y' }">
			<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ time_t_year( l.timestamp, l.time_zone ) }">
		<MvELSEIF EXPR = "{ l.char EQ 'y' }">
			<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ substring_var( time_t_year( l.timestamp, l.time_zone ), 3, 2) }">
		<MvELSEIF EXPR = "{ l.char EQ 'L' }">
			<MvASSIGN NAME = "l.year" VALUE = "{ time_t_year( l.timestamp, l.time_zone ) }">
			<MvIF EXPR = "{ ( ( ( l.year MOD 400 ) EQ 0 ) OR ( ( l.year MOD 100 ) NE 0 ) ) AND ( ( l.year MOD 4 ) EQ 0 ) }">
				<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ '1' }">
			<MvELSE>
				<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ '0' }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.char EQ 'a' }">
			<MvASSIGN NAME = "l.hour" VALUE = "{ time_t_hour( l.timestamp, l.time_zone ) }">
			<MvIF EXPR = "{ l.hour GT 11 }">
				<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ 'pm' }">
			<MvELSE>
				<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ 'am' }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.char EQ 'A' }">
			<MvASSIGN NAME = "l.hour" VALUE = "{ time_t_hour( l.timestamp, l.time_zone ) }">
			<MvIF EXPR = "{ l.hour GT 11 }">
				<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ 'PM' }">
			<MvELSE>
				<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ 'AM' }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.char EQ 'g' }">
			<MvASSIGN NAME = "l.hour" VALUE = "{ time_t_hour( l.timestamp, l.time_zone ) }">
			<MvIF EXPR = "{ l.hour GT 12 }">
				<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ ( l.hour - 12 ) }">
			<MvELSE>
				<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ l.hour }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.char EQ 'G' }">
			<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ time_t_hour( l.timestamp, l.time_zone ) }">
		<MvELSEIF EXPR = "{ l.char EQ 'h' }">
			<MvASSIGN NAME = "l.hour" VALUE = "{ time_t_hour( l.timestamp, l.time_zone ) }">
			<MvIF EXPR = "{ l.hour GT 12 }">
				<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ padl( ( l.hour - 12 ), 2, 0 ) }">
			<MvELSE>
				<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ padl( l.hour, 2, 0 ) }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.char EQ 'H' }">
			<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ padl( time_t_hour( l.timestamp, l.time_zone ), 2, 0 ) }">
		<MvELSEIF EXPR = "{ l.char EQ 'i' }">
			<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ padl( time_t_min( l.timestamp, l.time_zone ), 2, 0 ) }">
		<MvELSEIF EXPR = "{ l.char EQ 's' }">
			<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ padl( time_t_sec( l.timestamp, l.time_zone ), 2, 0 ) }">
		<MvELSEIF EXPR = "{ l.char EQ 'c' }">
			<MvASSIGN NAME = "l.output" VALUE = "{ l.output $
								padl( time_t_year( l.timestamp, l.time_zone ), 4, '0' )			$
								 padl( time_t_month( l.timestamp, l.time_zone ), 2, '0' ) 		$
								 padl( time_t_dayofmonth( l.timestamp, l.time_zone ), 2, '0' )	$
								 'T' 															$
								 padl( time_t_hour( l.timestamp, l.time_zone ), 2, '0' )		$
								 padl( time_t_min( l.timestamp, l.time_zone ), 2, '0' )			$
								 padl( time_t_sec( l.timestamp, l.time_zone ), 2, '0' )			$
								 'Z' }">
		<MvELSE>
			<MvASSIGN NAME = "l.output" VALUE = "{ l.output $ l.char }">
		</MvIF>

	</MvFOR>

	<MvASSIGN NAME = "l.return" VALUE = "{ l.output }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Load_Product" PARAMETERS = "module var, param, options var, product var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>

		Load_Product( options var, product var )
		------------------------------------------------

		Example Use:
		```
		<h2>Component</h2>
		<mvt:assign name="g.options:code" value="'apple'" />
		<mvt:item name="developer_util" param="Load_Product(g.options, g.product_foo)" />
		<hr>
		<mvt:eval expr="glosub(miva_array_serialize(g.product_foo), ',', '<br>')" />
		```

	</MvCOMMENT>

	<MvASSIGN NAME = "l.product" VALUE = "{ _Load_Product( l.options ) }" />
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>


<MvFUNCTION NAME = "_Load_Product" PARAMETERS = "options var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>

		_Load_Product( options var, product var )
		------------------------------------------------

		Low-level function with availability for mvt:do
		Helpful for using variables at the `l.` & `l.settings` scopes

		Example Use:
		```
		<h2>mvt:do</h2>
		<mvt:assign name="l.options:code" value="'apple'" />
		<mvt:assign name="l.options:include" value="'runtime,currency,uris,url'" />
		<mvt:do file="g.Module_Root $ 'modules/util/developer_util.mvc'" name="l.product_v2" value="_Load_Product(l.options)" />
		<hr>
		<mvt:eval expr="glosub(miva_array_serialize(l.product_v2), ',', '<br>')" />
		```

	</MvCOMMENT>

	<MvIF EXPR = "{ l.options:id }">
		<MvIF EXPR = "{ 'runtime' IN l.options:include }">
			<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.result" VALUE = "{ Runtime_Product_Load_ID( l.options:id, l.product ) }" />
		<MvELSE>
			<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.result" VALUE = "{ Product_Load_ID( l.options:id, l.product ) }" />
		</MvIF>
	<MvELSEIF EXPR = "{ l.options:code }">
		<MvIF EXPR = "{ 'runtime' IN l.options:include }">
			<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.result" VALUE = "{ Runtime_Product_Load_Code( l.options:code, l.product ) }" />
		<MvELSE>
			<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.result" VALUE = "{ Product_Load_Code( l.options:code, l.product ) }" />
		</MvIF>
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "" />
	</MvIF>


	<MvIF EXPR = "{ ISNULL l.product:id }">
		<MvFUNCTIONRETURN VALUE = "" />
	</MvIF>

	<MvCOMMENT>
		| Currency Formatting
	</MvCOMMENT>
	<MvIF EXPR = "{ 'currency' IN l.options:include }">
		<MvDO FILE = "{ g.Module_Store_Module_Currency }" NAME = "l.product:formatted_price" VALUE = "{ CurrencyModule_AddFormatting( g.Store:currncy_mod, l.product:price ) }" />
		<MvDO FILE = "{ g.Module_Store_Module_Currency }" NAME = "l.product:formatted_cost" VALUE = "{ CurrencyModule_AddFormatting( g.Store:currncy_mod, l.product:cost ) }" />
	</MvIF>

	<MvCOMMENT>
		| Runtime
	</MvCOMMENT>
	<MvIF EXPR = "{ 'runtime' IN l.options:include }">
		<MvDO FILE = "{ g.Module_Feature_TUI_UT }" NAME = "l.result" VALUE = "{ CommonComponentFields_Initialize_Product_Runtime( l.product ) }" />
	</MvIF>

	<MvCOMMENT>
		| URIs
	</MvCOMMENT>
	<MvIF EXPR = "{ 'uris' CIN l.options:include }">
		<MvDO FILE = "{ g.Module_Feature_URI_DB }" NAME = "l.success" VALUE = "{ URIList_Load_Product( l.product:id, l.product:uris ) }" />
	</MvIF>

	<MvCOMMENT>
		| Store URL
	</MvCOMMENT>
	<MvIF EXPR = "{ 'url' CIN l.options:include }">
		<MvDO FILE = "{ g.Module_Feature_URI_UT }" NAME = "l.product:link" VALUE = "{ Store_Product_URL( l.product, l.null ) }" />
	</MvIF>


	<MvFUNCTIONRETURN VALUE = "{ l.product }" />
</MvFUNCTION>

<MvFUNCTION NAME = "Product_Load_Imagetype_LowLevel" PARAMETERS = "module var, param, product_id, type_id, image_width, image_height" STANDARDOUTPUTLEVEL = "">

	<MvIF EXPR = "{ NOT [g.Module_Library_DB ].ProductImage_Load_Type( l.product_id, l.type_id, l.product_imagetype ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [g.Module_Library_DB ].GeneratedImage_Load_Dimensions( l.product_imagetype:image_id, l.image_width, l.image_height, l.cropped_image ) }">
		<MvIF EXPR = "{ NOT [g.Module_Library_DB ].Image_Load_ID( l.product_imagetype:image_id, l.imagedata ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [g.Module_Library_DB ].Image_Load_File( l.imagedata:image, l.product_image ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>

		<MvIF EXPR = "{ NOT [g.Module_Library_DB ].GeneratedImage_FindOrInsert_Image_Dimensions( l.product_image, l.image_width, l.image_height, l.cropped_image ) }">
			<MvFUNCTIONRETURN VALUE = 0>
		</MvIF>
	</MvIF>
	<MvFUNCTIONRETURN VALUE = "{ l.cropped_image:image }">
</MvFUNCTION>

<MvFUNCTION NAME = "Product_Load_Imagetype" PARAMETERS = "module var, param, product_id, type_code, image_width, image_height, output var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Product_Load_Imagetype( product_id, type_code, image_width, image_height, output var )
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_ID( l.product_id, l.loaded_product ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ImageType_Load_Code( l.type_code, l.imagetype ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.output" VALUE = "{ Product_Load_Imagetype_LowLevel( l.module, l.param, l.product_id, l.imagetype:id, l.image_width, l.image_height ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ProductArray_Load_Imagetype" PARAMETERS = "module var, param, product_array var, type_code, image_width, image_height, member" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	ProductArray_Load_Imagetype( product_array var, type_code, image_width, image_height, member )
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].ImageType_Load_Code( l.type_code, l.imagetype ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFOREACH ITERATOR = "l.product" ARRAY = "l.product_array">
		<MvASSIGN NAME = "l.product_imagetype"	VALUE = "">
		<MvASSIGN NAME = "l.imagedata"			VALUE = "">
		<MvASSIGN NAME = "l.product_image"		VALUE = "">
		<MvASSIGN NAME = "l.cropped_image"		VALUE = "">

		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_ID( l.product:id, l.loaded_product ) }">
			<MvFOREACHCONTINUE />
		</MvIF>

		<MvASSIGN NAME = "l.product" MEMBER = "{ l.member }" VALUE = "{ Product_Load_Imagetype_LowLevel( l.module, l.param, l.product:id, l.imagetype:id, l.image_width, l.image_height ) }">
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "SQL" PARAMETERS = "module var, param, parameters var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	SQL( parameters var )
	|	Taken from Gassan's module
	|
	|	l.parameters:query
	|	l.parameters:bind_parameters (array)
	|
	|	Returns to l.parameters:results
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT len( l.parameters:query ) GT 0 }">
		
		<MvIF EXPR = "{ l.parameters:assign_error EQ 1 }">
			<MvASSIGN NAME  =  "l.parameters:error" VALUE = "{ g.MvOPENVIEW_Error }">
			<MvFUNCTIONRETURN VALUE  =  0 />
		<MvELSE>
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'SQL-QUERIES-0002', 'No Query Found Although One Was Expected' ) }">
		</MvIF>
	</MvIF>

	<MvCOMMENT>Determine what type of query was passed</MvCOMMENT>
	<MvASSIGN NAME = "l.parameters:query" VALUE = "{ trim(l.parameters:query) }" />
	<MvIF EXPR = "{ indexofi('SELECT', l.parameters:query, 1) EQ 1 }">
		<MvASSIGN NAME = "l.parameters:query_type" VALUE = "SELECT" />
	<MvELSEIF EXPR = "{ indexofi('INSERT', l.parameters:query, 1) EQ 1 }">
		<MvASSIGN NAME = "l.parameters:query_type" VALUE = "INSERT" />
	<MvELSEIF EXPR = "{ indexofi('UPDATE', l.parameters:query, 1) EQ 1 }">
		<MvASSIGN NAME = "l.parameters:query_type" VALUE = "UPDATE" />
	<MvELSEIF EXPR = "{ indexofi('DELETE', l.parameters:query, 1) EQ 1 }">
		<MvASSIGN NAME = "l.parameters:query_type" VALUE = "DELETE" />
	<MvELSEIF EXPR = "{ indexofi('EXPLAIN', l.parameters:query, 1) EQ 1 }">
		<MvASSIGN NAME = "l.parameters:query_type" VALUE = "EXPLAIN" />
	<MvELSEIF EXPR = "{ indexofi('DROP', l.parameters:query, 1) EQ 1 }">
		<MvASSIGN NAME = "l.parameters:query_type" VALUE = "DROP" />
	<MvELSEIF EXPR = "{ indexofi('CREATE', l.parameters:query, 1) EQ 1 }">
		<MvASSIGN NAME = "l.parameters:query_type" VALUE = "CREATE" />
	<MvELSEIF EXPR = "{ indexofi('ALTER', l.parameters:query, 1) EQ 1 }">
		<MvASSIGN NAME = "l.parameters:query_type" VALUE = "ALTER" />
	<MvELSEIF EXPR = "{ indexofi('SHOW', l.parameters:query, 1) EQ 1 }">
		<MvASSIGN NAME = "l.parameters:query_type" VALUE = "SHOW" />
	<MvELSE>
		<MvASSIGN NAME = "l.parameters:query_type" VALUE = "OTHER" />
	</MvIF>

	<MvCOMMENT>Build Prepared Query Bind Parameters</MvCOMMENT>
	<MvIF EXPR = "{ miva_array_elements(l.parameters:bind_parameters) GT 0 AND miva_array_collapse(l.parameters:bind_parameters) }">
		<MvFOREACH ITERATOR = "l.bind_parameter" ARRAY = "l.parameters:bind_parameters" INDEX = "l.index">
			<MvIF EXPR = "{ l.index EQ 1 }">
				<MvASSIGN NAME = "l.parameters:bind_parameter_list" VALUE = "{ 'l.parameters:bind_parameters[' $ l.index $ ']' }" />
			<MvELSE>
				<MvASSIGN NAME = "l.parameters:bind_parameter_list" VALUE = "{ l.parameters:bind_parameter_list $ ', l.parameters:bind_parameters[' $ l.index $ ']' }" />
			</MvIF>
		</MvFOREACH>		
	</MvIF>

	<MvCOMMENT>If the passed parameter structure contains a result set, lets clear it out before loading the new one</MvCOMMENT>
	<MvIF EXPR = "{ miva_array_elements(l.parameters:results) }">
		<MvASSIGN NAME = "l.null" VALUE = "{ miva_array_clear(l.parameters:results, 1, miva_array_elements(l.parameters:results)) }">
	</MvIF>

	<MvCOMMENT>Execute the Query</MvCOMMENT>
	<MvIF EXPR = "{ l.parameters:query_type EQ 'SELECT' OR l.parameters:query_type EQ 'EXPLAIN' OR l.parameters:query_type EQ 'SHOW' }">
		<MvOPENVIEW NAME =  "Merchant" VIEW = "SQL" QUERY = "{ l.parameters:query }" FIELDS =  "{ l.parameters:bind_parameter_list }">

			<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
				<MvIF EXPR = "{ l.parameters:assign_error EQ 1 }">
					<MvASSIGN NAME  =  "l.parameters:error" VALUE = "{ g.MvOPENVIEW_Error }">
					<MvFUNCTIONRETURN VALUE  =  0 />
				<MvELSE>
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'SQL-QUERY-0001', g.MvOPENVIEW_Error ) }">
				</MvIF>
			</MvIF>

			
			<MvCOMMENT>Determine what fields we have from this query result set to build the result array</MvCOMMENT>
			<MvREVEALSTRUCTURE NAME = "MERCHANT" VIEW = "SQL" VARIABLE = "l.fields">

			<MvCOMMENT>Build an array of the result sets in the data structure passed to this function</MvCOMMENT>
			<MvASSIGN NAME = "l.index" VALUE = "1">
			<MvWHILE EXPR = "{ NOT SQL.d.EOF }">
				<MvFOREACH ITERATOR = "l.field" ARRAY = "l.fields" INDEX = "l.field_index">
					<MvASSIGN NAME = "l.parameters:results" INDEX = "{ l.index }" MEMBER = "{ l.field:field_name }" VALUE = "{ miva_variable_value('SQL.d.' $ l.field:field_name) }">
				</MvFOREACH>

				<MvASSIGN NAME = "l.index" VALUE = "{ l.index + 1 }">
				<MvSKIP NAME = "Merchant" VIEW = "SQL" ROWS = 1>
			</MvWHILE>

			<MvASSIGN NAME = "l.parameters:fields" VALUE = "{ l.fields }" />
			
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "SQL">
	<MvELSE>
		<MvTRANSACT NAME = "Merchant">
			<MvQUERY NAME = "Merchant" QUERY = "{ l.parameters:query }" FIELDS = "{ l.parameters:bind_parameter_list }">

			<MvIF EXPR = "{ g.MvQUERY_Error }">
				<MvROLLBACK NAME = "Merchant">
				<MvIF EXPR = "{ l.parameters:assign_error EQ 1 }">
					<MvASSIGN NAME  =  "l.parameters:error" VALUE = "{ g.MvOPENVIEW_Error }">
					<MvFUNCTIONRETURN VALUE  =  0 />
				<MvELSE>
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'SQL-QUERIES-0001', g.MvQUERY_Error ) }">
				</MvIF>
				
			</MvIF>

			<MvASSIGN NAME = "l.parameters:results" VALUE = "1">
		<MvCOMMIT NAME = "Merchant">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Category_Product_Image" PARAMETERS = "module var, param, category_id, type_code, image_width, image_height, output var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Category_Product_Image( category_id, type_code, image_width, image_height, output var )
	|	Retrieves an image from the first runtime product from the category.
	|
	</MvCOMMENT>
	<MvASSIGN NAME = "l.output" VALUE = "">
	<MvASSIGN NAME = "l.offset" VALUE = "0">

	<MvWHILE EXPR = "{ ISNULL l.output }">
		<MvASSIGN NAME = "l.products" VALUE = "">
		<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Runtime_ProductList_Load_Offset_Category( l.category_id, l.offset, 1, l.next_offset, l.products ) }">
			<MvWHILESTOP />
		</MvIF>
		<MvIF EXPR = "{ l.offset EQ l.next_offset }">
			<MvWHILESTOP />
		</MvIF>
		<MvIF EXPR = "{ miva_array_elements( l.products ) EQ 0 }">
			<MvWHILESTOP />
		</MvIF>
		<MvASSIGN NAME = "l.offset"			VALUE = "{ l.next_offset }">
		<MvASSIGN NAME = "l.next_offset"	VALUE = "">
		<MvASSIGN NAME = "l.product" VALUE = "{ l.products[1] }">
		<MvASSIGN NAME = "l.success" VALUE = "{ Product_Load_Imagetype( l.module, l.param, l.product:id, l.type_code, l.image_width, l.image_height, l.output ) }">
	</MvWHILE>

</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Output_Variable" PARAMETERS = "module var, param, value var, output var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	JSON_Output_Variable( value var, output var )
	|	Catpures JSON_Output and saves to a variable.
	|
	</MvCOMMENT>
	<MvCAPTURE VARIABLE = "l.output">
		<MvDO FILE = "{ g.Module_JSON }" NAME = "l.success" VALUE = "{ JSON_Output( l.value ) }">
	</MvCAPTURE>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Output_Floats_Variable" PARAMETERS = "module var, param, value var, output var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	JSON_Output_Floats_Variable( value var, output var )
	|	Catpures JSON_Output_With_Floats and saves to a variable.
	|
	</MvCOMMENT>
	<MvCAPTURE VARIABLE = "l.output">
		<MvEVAL EXPR = "{ JSON_Output_With_Floats( l.value ) }">
	</MvCAPTURE>
</MvFUNCTION>


<MvFUNCTION NAME = "JSON_Output_With_Floats" PARAMETERS = "value var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvCOMMENT>
	|
	|	This is a helper function for JSON_Output_Floats_Variable
	|
	</MvCOMMENT>
	<MvASSIGN NAME = "l.member_count"	VALUE = "{ miva_struct_members( l.value, l.members ) }">
	<MvIF EXPR = "{ l.member_count GT 0 }">
		{
			<MvFOREACH INDEX = "l.pos" ITERATOR = "l.member" ARRAY = "l.members" COUNT = "{ l.member_count }">
				<MvIF EXPR = "{ l.pos GT 1 }">
					,
				</MvIF>

				<MvREFERENCEARRAY NAME = "l.member_value" VARIABLE = "l.value">
					<MvMEMBER NAME = "{ l.member }">
				</MvREFERENCEARRAY>

				"<MvEVAL EXPR = "{ encodejavascriptstring( l.member ) }">": <MvEVAL EXPR = "{ JSON_Output_With_Floats( l.member_value ) }">
			</MvFOREACH>
		}

		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.element_count"	VALUE = "{ miva_array_elements( l.value ) }">
	<MvIF EXPR = "{ l.element_count GT 0 }">
		[
		<MvFOREACH INDEX = "l.pos" ITERATOR = "l.element" ARRAY = "l.value" COUNT = "{ l.element_count }">
			<MvIF EXPR = "{ l.pos GT 1 }">
				,
			</MvIF>

			<MvEVAL EXPR = "{ JSON_Output_With_Floats( l.element ) }">
		</MvFOREACH>
		]

		<MvFUNCTIONRETURN>
	</MvIF>

	<MvASSIGN NAME = "l.value_nodec" VALUE = "{ gettoken( l.value, '.', 1 ) }">
	<MvASSIGN NAME = "l.value_negative" VALUE = "{ l.value_nodec * -1 }">

	<MvIF EXPR = "{ ( isdigit( l.value ) OR isdigit( l.value_nodec ) OR isdigit( l.value_negative) ) AND
					NOT ISNULL l.value	AND
					NOT ( len_var( l.value ) GE 2 AND substring_var( l.value, 1, 1 ) EQ '0' ) }">
		<MvEVAL EXPR = "{ l.value }">
	<MvELSE>
		"<MvEVAL EXPR = "{ encodejavascriptstring( l.value ) }">"
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Next_Weekday" PARAMETERS = "module var, param, timestamp, dow, output var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Next_Weekday( timestamp, dow, output var )
	|	timestamp = starting day in timestamp form
	|	dow = Day Of Week. Sunday = 1, Monday = 2, Etc.
	|
	</MvCOMMENT>
	<MvASSIGN NAME = "l.timezone" VALUE = "{ g.Merchant_Local_Timezone }">
	<MvASSIGN NAME = "l.day" VALUE = "{ time_t_dayofweek( l.timestamp, l.timezone ) }">

	<MvASSIGN NAME = "l.math" VALUE = "{ ( ( l.day - l.dow ) -7 ) * -1 }">

	<MvASSIGN NAME = "l.output" VALUE = "{ l.timestamp + ( l.math * 86400 ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Page_Render_Variable" PARAMETERS = "module var, param, page_code, output var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Page_Render_Variable( page_code, output var)
	|	Render a Page Template and save it to a variable.
	|
	</MvCOMMENT>
	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_DB ].Page_Load_Code( l.page_code, l.page) }">
		<MvFUNCTIONRETURN VALUE = 0 >
	</MvIF>

	<MvCAPTURE VARIABLE = "l.output">
		<MvDO FILE = "{ g.Module_Feature_TUI_MGR }" NAME = "l.page_loaded" VALUE = "{ TemplateManager_Render_Page( l.page_code ) }">
	</MvCAPTURE>
</MvFUNCTION>

<MvFUNCTION NAME = "Recently_Viewed_Products_LowLevel" PARAMETERS = "module var, param, customfield_name, max, current_product_code, output var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Recently_Viewed_Products_LowLevel( 'recently_viewed', 5, l.settings:product:code, l.settings:recently_viewed:products )
	|
	</MvCOMMENT>
	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( 'customfields', l.customfields ) }">
		<MvFUNCTIONRETURN VALUE = 0 >
	</MvIF>

	<MvIF EXPR = "{ l.customfields:active EQ 0 }">
		<MvFUNCTIONRETURN VALUE = 0 >
	</MvIF>

	<MvDO FILE = "{ g.Module_Root $ l.customfields:module }" NAME = "l.success" VALUE = "{ Read_Basket( l.module, l.param, l.customfield_name, l.recently_viewed:product_codes ) }">

	<MvASSIGN NAME = "l.recently_viewed:product_codes" VALUE = "{ miva_array_deserialize( l.recently_viewed:product_codes ) }">
	
	<MvASSIGN NAME = "l.recently_viewed:exsiting_index" VALUE = "{ miva_array_find( l.current_product_code, l.recently_viewed:product_codes, 0 ) }">

	<MvIF EXPR = "{ l.recently_viewed:exsiting_index GT 0 }">
		<MvASSIGN NAME = "l.success" VALUE = "{ miva_array_delete( l.recently_viewed:product_codes, l.recently_viewed:exsiting_index, 1 ) }">
	</MvIF>

	<MvCOMMENT>
	|
	|	Assign product code array to output var before assigning current product code to the array.
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.output" VALUE = "{ l.recently_viewed:product_codes }">

	<MvASSIGN NAME = "l.success" VALUE = "{ miva_array_insert_var( l.recently_viewed:product_codes, l.current_product_code, 1 ) }">

	<MvASSIGN NAME = "l.recently_viewed:product_count" VALUE = "{ miva_array_elements( l.recently_viewed:product_codes ) }">

	<MvASSIGN NAME = "l.recently_viewed:count_check" VALUE = "{ ( l.recently_viewed:product_count - l.max ) }">

	<MvIF EXPR = "{ l.recently_viewed:count_check GT 0 }">
		<MvASSIGN NAME = "l.success" VALUE = "{ miva_array_delete( l.recently_viewed:product_codes, l.max, l.recently_viewed:count_check ) }">
	</MvIF>

	<MvDO FILE = "{ g.Module_Root $ l.customfields:module }" NAME = "l.success" VALUE = "{ Write_Basket( l.module, l.param, l.customfield_name, miva_array_serialize( l.recently_viewed:product_codes) ) }">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Recently_Viewed_Products" PARAMETERS = "module var, param, customfield_name, max, current_product_code, type_code, image_width, image_height, image_member, output var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Recently_Viewed_Products( 'recently_viewed', 5, l.settings:product:code, 'main', 150, 150, 'main_image', l.settings:recently_viewed )
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT Recently_Viewed_Products_LowLevel( l.module, l.param, l.customfield_name, l.max, l.current_product_code, l.products ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ miva_array_elements( l.products ) EQ 0 }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvFOREACH ITERATOR = "l.product" ARRAY = "l.products">
		<MvASSIGN NAME = "l.options:code" VALUE = "{ l.product }">
		<MvASSIGN NAME = "l.options:include" VALUE = "runtime,currency,url">
		<MvASSIGN NAME = "l.product" VALUE = "{ _Load_Product( l.options ) }">
	</MvFOREACH>

	<MvASSIGN NAME = "l.success" VALUE = "{ ProductArray_Load_Imagetype( l.module, l.param, l.products, l.type_code, l.image_width, l.image_height, l.image_member ) }">

	<MvASSIGN NAME = "l.output" VALUE = "{ l.products }">
</MvFUNCTION>

<MvFUNCTION NAME = "ShippingMethodList_ForItems" PARAMETERS = "module var, param, basket var, items var, output var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	ShippingMethodList_ForItems( g.Basket, l.settings:my_items, l.settings:shipping_methods )
	|
	|	basket var = g.Basket
	|	items var (basically l.settings:basket:items)
	|		Example Structure for each Item:
	|			l.basketitem:product_id
	|			l.basketitem:variant_id	(optional)
	|			l.basketitem:wish_id	(optional)
	|			l.basketitem:subterm_id	(optional)
	|			l.basketitem:code
	|			l.basketitem:name
	|			l.basketitem:retail		(optional)
	|			l.basketitem:base_price	(optional)
	|			l.basketitem:price
	|			l.basketitem:weight
	|			l.basketitem:taxable
	|			l.basketitem:upsold
	|			l.basketitem:quantity
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.temp_basket:cust_id"    VALUE = "{ l.basket:cust_id }" >
	<MvASSIGN NAME = "l.temp_basket:order_id"   VALUE = "0" >
	<MvASSIGN NAME = "l.temp_basket:order_proc" VALUE = "0" >
	<MvASSIGN NAME = "l.temp_basket:ship_id"    VALUE = "0" >
	<MvASSIGN NAME = "l.temp_basket:session_id" VALUE = "{ MakeSessionID() }" >
	<MvASSIGN NAME = "l.temp_basket:lastupdate" VALUE = "{ s.dyn_time_t }" >
	<MvASSIGN NAME = "l.temp_basket:ship_fname" VALUE = "{ l.basket:ship_fname }" >
	<MvASSIGN NAME = "l.temp_basket:ship_lname" VALUE = "{ l.basket:ship_lname }" >
	<MvASSIGN NAME = "l.temp_basket:ship_email" VALUE = "{ l.basket:ship_email }" >
	<MvASSIGN NAME = "l.temp_basket:ship_comp"  VALUE = "{ l.basket:ship_comp }" >
	<MvASSIGN NAME = "l.temp_basket:ship_phone" VALUE = "{ l.basket:ship_phone }" >
	<MvASSIGN NAME = "l.temp_basket:ship_fax"   VALUE = "{ l.basket:ship_fax }" >
	<MvASSIGN NAME = "l.temp_basket:ship_addr1" VALUE = "{ l.basket:ship_addr1 }" >
	<MvASSIGN NAME = "l.temp_basket:ship_addr2" VALUE = "{ l.basket:ship_addr2 }" >
	<MvASSIGN NAME = "l.temp_basket:ship_city"  VALUE = "{ l.basket:ship_city }" >
	<MvASSIGN NAME = "l.temp_basket:ship_state" VALUE = "{ l.basket:ship_state }" >
	<MvASSIGN NAME = "l.temp_basket:ship_zip"   VALUE = "{ l.basket:ship_zip }" >
	<MvASSIGN NAME = "l.temp_basket:ship_cntry" VALUE = "{ l.basket:ship_cntry }" >
	<MvIF EXPR = "{ ISNULL l.temp_basket:ship_state }">
		<MvASSIGN NAME = "l.temp_basket:ship_state" VALUE = "{ l.basket:ship_state_select }">
	</MvIF>

	<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.basket_insert_success" VALUE = "{ Basket_Insert( l.temp_basket ) }">

	<MvIF EXPR = "{ NOT l.basket_insert_success }">
		<MvFUNCTIONRETURN VALUE = 0 >
	<MvELSE>
		<MvFOREACH ITERATOR = "l.item" ARRAY = "l.items">
			<MvASSIGN NAME = "l.item:basket_id" VALUE = "{ l.temp_basket:basket_id }">
			<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.success" VALUE = "{ BasketItem_Insert( l.item ) }">
		</MvFOREACH>

		<MvASSIGN NAME = "l.original_basket" VALUE = "{ g.Basket }">
		<MvASSIGN NAME = "g.Basket" VALUE = "{ l.temp_basket }">

		<MvDO FILE = "{ g.Module_Feature_SHP_UT }" NAME = "l.success" VALUE = "{ ShippingMethodList_Load_Basket( l.output ) }">

		<MvASSIGN NAME = "g.Basket" VALUE = "{ l.original_basket }">
		<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.success" VALUE = "{ Basket_Reset( l.temp_basket ) }">
	</MvIF>

</MvFUNCTION>


<MvFUNCTION NAME = "Category_Tree_Image" PARAMETERS = "module var, param, category_id, output var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Category_Tree_Image( l.settings:category:id, l.settings:category:tree_image )
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( 'cmp-cssui-cattree', l.cattree ) }">
		<MvFUNCTIONRETURN VALUE = 0 >
	</MvIF>

	<MvIF EXPR = "{ l.cattree:active EQ 0 }">
		<MvFUNCTIONRETURN VALUE = 0 >
	</MvIF>

	<MvDO FILE = "{ g.Module_Root $ l.cattree:module }" NAME = "l.success" VALUE = "{ CSSUI_CatTree_Load( l.category_id, l.temp_output ) }">
	<MvASSIGN NAME = "l.output" VALUE = "{ l.temp_output:image }">
</MvFUNCTION>

<MvFUNCTION NAME = "Category_Title_Image" PARAMETERS = "module var, param, category_id, output var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Category_Title_Image( l.settings:category:id, l.settings:category:tree_image )
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( 'cmp-cssui-cattitle', l.cattitle ) }">
		<MvFUNCTIONRETURN VALUE = 0 >
	</MvIF>

	<MvIF EXPR = "{ l.cattitle:active EQ 0 }">
		<MvFUNCTIONRETURN VALUE = 0 >
	</MvIF>

	<MvDO FILE = "{ g.Module_Root $ l.cattitle:module }" NAME = "l.success" VALUE = "{ CSSUI_CatTitle_Load( l.category_id, l.temp_output ) }">
	<MvASSIGN NAME = "l.output" VALUE = "{ l.temp_output:image }">
</MvFUNCTION>

<MvFUNCTION NAME = "Scheduled_Promo_PriceGroup" PARAMETERS = "module var, param, pricegroup_name, output var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Scheduled_Promo_PriceGroup( pricegroup_name, output var )
	|	output var returns 1 or 0. This will determine if you should display the content.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_PGR_DB ].PriceGroup_Load_Name( l.pricegroup_name, l.pricegroup) }">
		<MvASSIGN NAME = "l.output" VALUE = "0">
		<MvFUNCTIONRETURN VALUE = "0" />
	</MvIF>

	<MvIF EXPR = "{ ( ( l.pricegroup:dt_start EQ 0 ) OR ( s.dyn_time_t GT l.pricegroup:dt_start) ) AND ( ( l.pricegroup:dt_start EQ 0 ) OR ( s.dyn_time_t LT l.pricegroup:dt_end ) ) }">
		<MvASSIGN NAME = "l.output" VALUE = "1">
		<MvFUNCTIONRETURN VALUE = "1" />
	<MvELSE>
		<MvASSIGN NAME = "l.output" VALUE = "0">
		<MvFUNCTIONRETURN VALUE = "0" />
	</MvIf>	
</MvFUNCTION>

<MvFUNCTION NAME = "Readytheme_Load_ContentSection_NoDiv_Variable" PARAMETERS = "module var, param, code, all_settings var, output var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Readytheme_Load_ContentSection_NoDiv_Variable( code, all_settings var, output var )
	|	output var returns 1 or 0. This will determine if you should display the content.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Module_Load_Code( 'readytheme', l.readytheme ) }">
		<MvFUNCTIONRETURN VALUE = 0 >
	</MvIF>

	<MvIF EXPR = "{ l.readytheme:active EQ 0 }">
		<MvFUNCTIONRETURN VALUE = 0 >
	</MvIF>

	<MvDO FILE = "{ g.Module_Root $ l.readytheme:module }" NAME = "l.load_content_section" VALUE = "{ ReadyTheme_ContentSection_Load_Code( l.code, l.loaded_content_section ) }">

	<MvIF EXPR = "{ ( NOT l.loaded_content_section ) OR ( l.loaded_content_section:active EQ 0 ) }">
		<MvFUNCTIONRETURN VALUE = 0 >
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_ID( l.loaded_content_section:templ_id, l.content_section ) }">
		<MvCAPTURE VARIABLE = "l.output">
			<MvEVAL EXPR = "{ [ g.Store_Template_Path $ l.content_section:filename ].Template_Render( l.null, l.all_settings ) }">
		</MvCAPTURE>
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Readytheme_Load_ContentSection_NoDiv" PARAMETERS = "module var, param, code, all_settings var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Readytheme_Load_ContentSection_NoDiv( code, all_settings var )
	|	output var returns 1 or 0. This will determine if you should display the content.
	|
	</MvCOMMENT>

	<MvIF EXPR = "{ Readytheme_Load_ContentSection_NoDiv_Variable( l.module, l.param, l.code, l.all_settings, l.output ) }">
		<MvEVAL EXPR = "{ l.output }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Free_Shipping_Qualifying" PARAMETERS = "module var, param, threshold, basket_total, output var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Free_Shipping_Qualifying( threshold, basket_total, output var )
	|	output var returns:
	|		qualifies = 1 | 0
	|		remaining = 0.00
	|		formatted_remaining = $0.00
	|
	</MvCOMMENT>

	<MvASSIGN NAME = "l.determine" VALUE = "{ l.threshold - l.basket_total }">

	<MvIF EXPR = "{ l.determine LE 0 }">
		<MvASSIGN NAME = "l.output" MEMBER = "qualifies" VALUE = "1">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvASSIGN NAME = "l.output" MEMBER = "qualifies" VALUE = "0">
	<MvASSIGN NAME = "l.output" MEMBER = "remaining" VALUE = "{ l.determine }">
	<MvDO FILE = "{ g.Module_Root $ g.Store:currncy_mod:module }" NAME = "l.output:formatted_remaining" VALUE = "{ CurrencyModule_AddFormatting( g.Store:currncy_mod, l.output:remaining ) }" />
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "Group_By_Member" PARAMETERS = "module var, param, array var, member, results var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Group_By_Member( array var, member, results var )
	|
	</MvCOMMENT>
	<MvFOREACH ITERATOR = "l.item" ARRAY  = "l.array">
		<MvIF EXPR = "{ miva_array_search( l.results, 0, l.result_item, 'l.result_item:member EQ miva_variable_value( \'l.item:\' $ l.member ) ' ) }">
			<MvASSIGN NAME = "l.success" VALUE = "{ miva_array_insert( l.result_item:groups, l.item, -1 ) }">
		<MvELSE>
			<MvASSIGN NAME = "l.temp:member" VALUE = "{ miva_variable_value( 'l.item:' $ l.member ) }">
			<MvASSIGN NAME = "l.success" VALUE = "{ miva_array_insert( l.temp:groups, l.item, -1) }">
			<MvASSIGN NAME = "l.success" VALUE = "{ miva_array_insert( l.results, l.temp, -1) }">
		</MvIF>
	</MvFOREACH>
</MvFUNCTION>

<MvFUNCTION NAME = "Group_By_Structure" PARAMETERS = "module var, param, array var, structure, member, results var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Group_By_Structure( array var, structure, member, results var )
	|
	</MvCOMMENT>

</MvFUNCTION>

<MvFUNCTION NAME = "Hidden_Fields" PARAMETERS = "module var, param, fields" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Hidden_Fields( fields )
	|	This will output hidden fields to the page.
	|	fields = comma seperated global variables
	|		Example:
	|			'g.Super_Awesome,g.Chosen_One,g.Cats_Equal_Love'
	|
	</MvCOMMENT>
	<MvHIDE FIELDS = "{ l.fields }">
</MvFUNCTION>

<MvFUNCTION NAME = "Send_Email_Attachment_Custom" PARAMETERS = "module var, param, from, to, cc, subject, body_message, file_name, file_dir, file_location, result var" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Send_Email_Attachment_Custom( from, to, cc, subject, body_message, file_name, file_dir, file_location, result var )
	|	This works like Send_Email_Attachment, but the body_message is passed.
	|
	</MvCOMMENT>
	<MvASSIGN NAME = "l.crlf"	VALUE = "{ asciichar( 13 ) $ asciichar( 10 ) }">

	<MvASSIGN NAME = "l.mix_boundary"	VALUE = "{ 'miva-mixed_' $ [ g.Module_Library_Utilities ].GenerateBoundary() }">
	<MvASSIGN NAME = "l.alt_boundary"	VALUE = "{ 'miva-alt_' $ [ g.Module_Library_Utilities ].GenerateBoundary() }">

	<MvASSIGN NAME = "l.mailhost"		VALUE = "{ g.Domain:mailhost }">

	<MvIF EXPR = "{ len( g.Domain:mailmeth ) }">
		<MvIF EXPR = "{ g.Domain:mail_angl }">
			<MvASSIGN NAME = "l.from" 	VALUE = "{ [ g.Module_Library_Utilities ].Email_Add_AngleBrackets( l.from ) }">
			<MvASSIGN NAME = "l.to" 	VALUE = "{ [ g.Module_Library_Utilities ].Email_Add_AngleBrackets( l.to ) }">
			<MvASSIGN NAME = "l.cc" 	VALUE = "{ [ g.Module_Library_Utilities ].Email_Add_AngleBrackets( l.cc ) }">
		</MvIF>

		<MvIF EXPR = "{ ISNULL trim( l.body_message ) }">
			<MvASSIGN NAME = "l.body_message"	VALUE = "{ 'By your request, Miva Merchant has emailed your exported file \'' $ l.file_name $ '\' from your \'' $ g.Store:name $ '\' store.' }">
		</MvIF>

		<MvCAPTURE VARIABLE = "l.headers"><MvASSIGN NAME = "l.ok" VALUE = "{ [ g.Module_Library_Utilities ].BuildMIMEAttachmentEmailHeaders( l.mix_boundary, l.alt_boundary, l.body_message, l.crlf  ) }"></MvCAPTURE>
		<MvCAPTURE VARIABLE = "l.message"><MvASSIGN NAME = "l.ok" VALUE = "{ [ g.Module_Library_Utilities ].BuildMIMEAttachmentEmailMessage( l.mix_boundary, l.file_name, l.file_dir, l.file_location, l.crlf ) }"></MvCAPTURE>
	
		<MIVA MvCOMMERCE_ERROR = "nonfatal, nodisplay">
		<MvCOMMERCE METHOD = "{ g.Domain:mailmeth }" FIELDS = "to,from,cc,subject,headers,message,mailhost">
		</MvCOMMERCE>

		<MvIF EXPR = "{ g.MvCOMMERCE_ERROR }">
			<MvASSIGN NAME = "l.result:error" VALUE = "1">
			<MvASSIGN NAME = "l.result:message" VALUE = "{ g.MvCOMMERCE_ERROR }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTL-PUB-00017', g.MvCOMMERCE_ERROR ) }">
		</MvIF>
	<MvELSE>
		<MIVA MvSMTP_Error = "nonfatal, nodisplay">

		<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Module_Library_Utilities ].Create_Address_Format( l.from, l.from_header, l.from_address ) }">
		<MvASSIGN NAME = "l.null" 				VALUE = "{ [ g.Module_Library_Utilities ].Create_Address_Formats( l.to, l.to_headers, l.to_addresses ) }">
		<MvASSIGN NAME = "l.null"				VALUE = "{ [ g.Module_Library_Utilities ].Create_Address_Formats( l.cc, l.cc_headers, l.cc_addresses ) }">
		
		<MvIF EXPR = "{ g.Domain:mail_angl }">
			<MvASSIGN NAME = "l.from_address" 	VALUE = "{ [ g.Module_Library_Utilities ].Email_Add_AngleBrackets( l.from_address ) }">
			<MvASSIGN NAME = "l.to_addresses" 	VALUE = "{ [ g.Module_Library_Utilities ].Email_Add_AngleBrackets( l.to_addresses ) }">
			<MvASSIGN NAME = "l.cc_addresses" 	VALUE = "{ [ g.Module_Library_Utilities ].Email_Add_AngleBrackets( l.cc_addresses ) }">
		</MvIF>

		<MvASSIGN NAME = "l.miva_headers" 		VALUE = "{ [ g.Module_Library_Utilities].Create_Miva_Email_Headers( l.from_header, l.to_headers, l.cc_headers, l.subject ) }">
		<MvASSIGN NAME = "l.port" 				VALUE = "{ g.Domain:mailport }">
		<MvASSIGN NAME = "l.username" 			VALUE = "{ g.Domain:mailuser }">
		<MvASSIGN NAME = "l.password" 			VALUE = "{ [ g.Module_Library_Crypto ].Decrypt_Payment_Password( g.Domain:mailpass ) }">
		
		<MvIF EXPR = "{ NOT ISNULL g.Domain:mailflags }">
			<MvASSIGN NAME = "l.flags" 			VALUE = "{ g.Domain:mailflags $ ', noheaders' }">
		<MvELSE>
			<MvASSIGN NAME = "l.flags" 			VALUE = "noheaders">
		</MvIF>

		<MvSMTP FROM 	 = "{ l.from_address }" 
				TO 		 = "{ l.to_addresses }" 
				CC 		 = "{ l.cc_addresses }" 
				SUBJECT  = "{ l.subject }" 
				MAILHOST = "{ l.mailhost }"
				FLAGS 	 = "{ l.flags }"
				PORT 	 = "{ l.port }"
				USERNAME = "{ l.username }"
				PASSWORD = "{ l.password }">
			<MvEVAL EXPR = "{ l.miva_headers }">

			<MvASSIGN NAME = "l.ok" 			VALUE = "{ [ g.Module_Library_Utilities ].BuildMIMEAttachmentEmailHeaders( l.mix_boundary, l.alt_boundary, l.body_message, l.crlf ) }">
			<MvASSIGN NAME = "l.ok" 			VALUE = "{ [ g.Module_Library_Utilities ].BuildMIMEAttachmentEmailMessage( l.mix_boundary, l.file_name, l.file_dir, l.file_location, l.crlf ) }">
		</MvSMTP>

		<MvIF EXPR = "{ g.MvSMTP_Error }">
			<MvASSIGN NAME = "l.result:error" VALUE = "1">
			<MvASSIGN NAME = "l.result:message" VALUE = "{ g.MvSMTP_Error }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'MER-UTL-PUB-00018', g.MvSMTP_Error ) }">
		</MvIF>
	</MvIF>
	<MvASSIGN NAME = "l.result:success" VALUE = "1">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>